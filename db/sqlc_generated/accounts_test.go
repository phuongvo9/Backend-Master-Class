package db

import (
	"context"
	"github.com/phuongvo9/Backend-Master-Class/util"
	"github.com/stretchr/testify/require"
	"testing"
)

// Separate CreateAccount for independent Unit tests

// Unit test for func CreateAccount - First the func needs to connect to the database
//		CreateAccount - input: para{owner, balance, currency} + context
//						output: Account {...} + error

func CreateTestAccount(t *testing.T) Account {
	// originally copied from func TestCreateAccount
	arg := CreateAccountParams{
		Owner:    util.RandomOwner(),
		Balance:  util.RandomMoney(),
		Currency: util.RandomCurrency(),
	}
	// [?] what is context.Background()
	account, err := testQueries.CreateAccount(context.Background(), arg)
	// To avoid many if, we can use the testify package for more convenience
	// go get github.com/stretchr/testify then import the "require" package

	// Validate the return-objects does not have error and empty
	require.NoError(t, err)
	require.NotEmpty(t, account)

	require.Equal(t, account.Owner, arg.Owner)
	require.Equal(t, account.Balance, arg.Balance)
	require.Equal(t, account.Currency, arg.Currency)

	// check account Id and createAt that are generated by Postgres not Zero
	require.NotZero(t, account.ID)
	require.NotZero(t, account.CreatedAt)

	return account
	//How can I return account with err?
}
func TestCreateAccount(t *testing.T) {
	CreateTestAccount(t)
}
